package comnd.example.dllo.mygiftdemo.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import comnd.example.dllo.mygiftdemo.db.PresentBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "PRESENT_BEAN".
*/
public class PresentBeanDao extends AbstractDao<PresentBean, Long> {

    public static final String TABLENAME = "PRESENT_BEAN";

    /**
     * Properties of entity PresentBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property UserName = new Property(1, String.class, "userName", false, "USER_NAME");
        public final static Property ImageUrl = new Property(2, String.class, "imageUrl", false, "IMAGE_URL");
        public final static Property Title = new Property(3, String.class, "title", false, "TITLE");
        public final static Property Author = new Property(4, String.class, "author", false, "AUTHOR");
        public final static Property NextUrl = new Property(5, String.class, "nextUrl", false, "NEXT_URL");
        public final static Property LikesCount = new Property(6, String.class, "likesCount", false, "LIKES_COUNT");
        public final static Property Other = new Property(7, String.class, "other", false, "OTHER");
        public final static Property Others = new Property(8, String.class, "others", false, "OTHERS");
        public final static Property Path = new Property(9, String.class, "path", false, "PATH");
        public final static Property Islike = new Property(10, Boolean.class, "islike", false, "ISLIKE");
        public final static Property Classify = new Property(11, String.class, "classify", false, "CLASSIFY");
    };


    public PresentBeanDao(DaoConfig config) {
        super(config);
    }
    
    public PresentBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"PRESENT_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"USER_NAME\" TEXT," + // 1: userName
                "\"IMAGE_URL\" TEXT," + // 2: imageUrl
                "\"TITLE\" TEXT," + // 3: title
                "\"AUTHOR\" TEXT," + // 4: author
                "\"NEXT_URL\" TEXT," + // 5: nextUrl
                "\"LIKES_COUNT\" TEXT," + // 6: likesCount
                "\"OTHER\" TEXT," + // 7: other
                "\"OTHERS\" TEXT," + // 8: others
                "\"PATH\" TEXT," + // 9: path
                "\"ISLIKE\" INTEGER," + // 10: islike
                "\"CLASSIFY\" TEXT);"); // 11: classify
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"PRESENT_BEAN\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, PresentBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String userName = entity.getUserName();
        if (userName != null) {
            stmt.bindString(2, userName);
        }
 
        String imageUrl = entity.getImageUrl();
        if (imageUrl != null) {
            stmt.bindString(3, imageUrl);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(4, title);
        }
 
        String author = entity.getAuthor();
        if (author != null) {
            stmt.bindString(5, author);
        }
 
        String nextUrl = entity.getNextUrl();
        if (nextUrl != null) {
            stmt.bindString(6, nextUrl);
        }
 
        String likesCount = entity.getLikesCount();
        if (likesCount != null) {
            stmt.bindString(7, likesCount);
        }
 
        String other = entity.getOther();
        if (other != null) {
            stmt.bindString(8, other);
        }
 
        String others = entity.getOthers();
        if (others != null) {
            stmt.bindString(9, others);
        }
 
        String path = entity.getPath();
        if (path != null) {
            stmt.bindString(10, path);
        }
 
        Boolean islike = entity.getIslike();
        if (islike != null) {
            stmt.bindLong(11, islike ? 1L: 0L);
        }
 
        String classify = entity.getClassify();
        if (classify != null) {
            stmt.bindString(12, classify);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public PresentBean readEntity(Cursor cursor, int offset) {
        PresentBean entity = new PresentBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // userName
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // imageUrl
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // title
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // author
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // nextUrl
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // likesCount
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // other
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // others
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // path
            cursor.isNull(offset + 10) ? null : cursor.getShort(offset + 10) != 0, // islike
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11) // classify
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, PresentBean entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUserName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setImageUrl(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setTitle(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setAuthor(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setNextUrl(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setLikesCount(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setOther(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setOthers(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setPath(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setIslike(cursor.isNull(offset + 10) ? null : cursor.getShort(offset + 10) != 0);
        entity.setClassify(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(PresentBean entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(PresentBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
